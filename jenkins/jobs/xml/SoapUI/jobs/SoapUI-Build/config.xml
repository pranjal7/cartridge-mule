<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>MACHINE_USER</name>
          <description></description>
          <defaultValue>ec2-user</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>SOAPUI_IP</name>
          <description></description>
          <defaultValue>10.0.6.9</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>SOAPUI_DOCKER_IMAGE</name>
          <description></description>
          <defaultValue>10.0.0.10:5000/soapui</defaultValue>
        </hudson.model.StringParameterDefinition>
        <hudson.model.StringParameterDefinition>
          <name>DOCKER_REGISTRY</name>
          <description></description>
          <defaultValue>10.0.0.10:5000</defaultValue>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <com.sonyericsson.rebuild.RebuildSettings plugin="rebuild@1.25">
      <autoRebuild>false</autoRebuild>
      <rebuildDisabled>false</rebuildDisabled>
    </com.sonyericsson.rebuild.RebuildSettings>
    <de.pellepelster.jenkins.walldisplay.WallDisplayJobProperty plugin="jenkinswalldisplay@0.6.30"/>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@2.3.5">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>ssh://jenkins@10.0.0.198:29418/Stubs</url>
        <credentialsId>adop-jenkins-master</credentialsId>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>*/develop</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions/>
  </scm>
  <assignedNode>docker</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers>
    <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.GerritTrigger plugin="gerrit-trigger@2.14.0">
      <spec></spec>
      <gerritProjects>
        <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.GerritProject>
          <compareType>PLAIN</compareType>
          <pattern>Stubs</pattern>
          <branches>
            <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
              <compareType>PLAIN</compareType>
              <pattern>develop</pattern>
            </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.Branch>
          </branches>
        </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.data.GerritProject>
      </gerritProjects>
      <skipVote>
        <onSuccessful>false</onSuccessful>
        <onFailed>false</onFailed>
        <onUnstable>false</onUnstable>
        <onNotBuilt>false</onNotBuilt>
      </skipVote>
      <silentMode>false</silentMode>
      <notificationLevel></notificationLevel>
      <silentStartMode>false</silentStartMode>
      <escapeQuotes>true</escapeQuotes>
      <noNameAndEmailParameters>false</noNameAndEmailParameters>
      <dependencyJobsNames></dependencyJobsNames>
      <readableMessage>false</readableMessage>
      <buildStartMessage></buildStartMessage>
      <buildFailureMessage></buildFailureMessage>
      <buildSuccessfulMessage></buildSuccessfulMessage>
      <buildUnstableMessage></buildUnstableMessage>
      <buildNotBuiltMessage></buildNotBuiltMessage>
      <buildUnsuccessfulFilepath></buildUnsuccessfulFilepath>
      <customUrl></customUrl>
      <serverName>ADOP Gerrit</serverName>
      <triggerOnEvents>
        <com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.events.PluginRefUpdatedEvent/>
      </triggerOnEvents>
      <dynamicTriggerConfiguration>false</dynamicTriggerConfiguration>
      <triggerConfigURL></triggerConfigURL>
      <triggerInformationAction/>
    </com.sonyericsson.hudson.plugins.gerrit.trigger.hudsontrigger.GerritTrigger>
  </triggers>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>#!/bin/bash
#-ex

# Execute below command only in the scenario where a new .xml file has been pushed to the repository or an existing file has been modified, or a .xml file has been deleted
# CHANGES=$(git show --pretty=&quot;format:&quot; --name-only --diff-filter=ACMRT | egrep &quot;\.xml$|Dockerfile$&quot;)

#if [ -n &quot;$CHANGES&quot; ]; then
  # remove this bit when exporting to .sh as this build will be triggered either by the DockerBuild or by push to dedicated repo



  ######## List the xml files that have changed in the latest commit ##########

  # Obtain xml files from Jenkins slave, referenced by name
  FILES=$(ls -R | egrep &quot;\.xml$&quot;)
  FILES_COUNT=$(echo $FILES | wc -w)
  ORDERED_FILES=$(echo $FILES | sort -t&apos;.&apos; -n -k1)
  FILES_LIST=$(echo $ORDERED_FILES | tr &apos; &apos; &apos;,&apos;)

  #FILES=${FILES}
  # export variables to file
  echo &quot;#====THIS PROPERTY FILE HAS BEEN GENERATED FROM JENKINS JOB $JOB_NAME==== \
  FILES_COUNT=${FILES_COUNT} \
  FILES_LIST=${FILES_LIST} \
  &quot; &gt; variables.properties

  ########## End of block ##########


  ########## Create a Dockerfile with parameters supplied to build ##########
  echo -e &quot;FROM ${SOAPUI_DOCKER_IMAGE}&quot; &gt; Dockerfile
  echo -e	&quot;\nADD *.xml /opt/SoapUI/SoapUI-5.2.1/Stubs/ \
  &quot; &gt;&gt; Dockerfile

  ARR=($FILES)
  echo ${ARR[@]}
  # in ARR we store the ordered files as an array


  ############## Ports obtained from file are exposed #############
  # Limitation: Ports need to be four digits
  for i in `seq 1 $FILES_COUNT`; do
    set +e
    grep -oP &apos; port=&quot;.{6}&apos; ${ARR[$i-1]}
    set -e
    grep -oP &apos;&quot;.{5}&apos; &lt;&lt;&lt; $(grep -oP &apos; port=&quot;.{6}&apos; ${ARR[$i-1]})
    
    RESULT=$(grep -oP &apos;&quot;.{5}&apos; &lt;&lt;&lt; $(grep -oP &apos; port=&quot;.{6}&apos; ${ARR[$i-1]}))
    PORT=${RESULT//\&quot;}
    PORTS_OPENED=&quot;$PORTS_OPENED $PORT&quot;
    echo $PORT
    echo -e &quot;\nEXPOSE $PORT \
    \nRUN nohup /opt/SoapUI/SoapUI-5.2.1/bin/mockservicerunner.sh /opt/SoapUI/SoapUI-5.2.1/Stubs/$(basename ${ARR[$i-1]}) &gt; $PORT.out &amp; \n \
    &quot; &gt;&gt; Dockerfile
  done
  # expose as many ports as xmls (start from 8088 up) p $PORT &gt; $PORT.out
  # sorted by name
  ########## End of block ##########


  #echo $REPO_PREFIX/soapui_stub:${BUILD_NUMBER}
  echo $DOCKER_REGISTRY/soapui_stub:${BUILD_NUMBER}

  ########## Build Dockerfile ##########
  #docker build -t $REPO_PREFIX/soapui_stub:${BUILD_NUMBER} .
  docker build -t $DOCKER_REGISTRY/soapui_stub:${BUILD_NUMBER} .
  ########## End of block ##########


  ########## Save the image locally to docker repository ##########
  docker push $DOCKER_REGISTRY/soapui_stub:${BUILD_NUMBER}


#fi

########## Save Variables needed for Soapui-Deploy in variables file ##########
echo &quot;PORTS_OPENED=$PORTS_OPENED&quot; &gt;&gt; variables
echo $PORTS_OPENED
echo &quot;FILES_COUNT=$FILES_COUNT&quot; &gt;&gt; variables

echo &quot;STUB_IMAGE=$DOCKER_REGISTRY/soapui_stub:${BUILD_NUMBER}&quot; &gt;&gt; variables
echo &quot;FILES_LIST=$FILES_LIST&quot; &gt;&gt; variables</command>
    </hudson.tasks.Shell>
    <EnvInjectBuilder plugin="envinject@1.91.3">
      <info>
        <propertiesFilePath>variables.properties</propertiesFilePath>
        <propertiesContent>DIRECTORIES_CHANGED=./</propertiesContent>
      </info>
    </EnvInjectBuilder>
    <EnvInjectBuilder plugin="envinject@1.91.3">
      <info>
        <propertiesFilePath>variables</propertiesFilePath>
      </info>
    </EnvInjectBuilder>
    <EnvInjectBuilder plugin="envinject@1.91.3">
      <info>
        <propertiesContent>STUB_IMAGE=$STUB_IMAGE
FILES_LIST=$FILES_LIST
FILES_COUNT=$FILES_COUNT</propertiesContent>
      </info>
    </EnvInjectBuilder>
    <hudson.plugins.parameterizedtrigger.TriggerBuilder plugin="parameterized-trigger@2.27">
      <configs>
        <hudson.plugins.parameterizedtrigger.BlockableBuildTriggerConfig>
          <configs>
            <hudson.plugins.parameterizedtrigger.FileBuildParameters>
              <propertiesFile>variables</propertiesFile>
              <failTriggerOnMissing>false</failTriggerOnMissing>
              <useMatrixChild>false</useMatrixChild>
              <onlyExactRuns>false</onlyExactRuns>
            </hudson.plugins.parameterizedtrigger.FileBuildParameters>
          </configs>
          <projects>SoapUI-Deploy</projects>
          <condition>ALWAYS</condition>
          <triggerWithNoParameters>false</triggerWithNoParameters>
          <buildAllNodesWithLabel>false</buildAllNodesWithLabel>
        </hudson.plugins.parameterizedtrigger.BlockableBuildTriggerConfig>
      </configs>
    </hudson.plugins.parameterizedtrigger.TriggerBuilder>
  </builders>
  <publishers>
    <hudson.plugins.git.GitPublisher plugin="git@2.3.5">
      <configVersion>2</configVersion>
      <pushMerge>false</pushMerge>
      <pushOnlyIfSuccess>true</pushOnlyIfSuccess>
      <forcePush>true</forcePush>
      <tagsToPush>
        <hudson.plugins.git.GitPublisher_-TagToPush>
          <targetRepoName>origin</targetRepoName>
          <tagName>$JOB_NAME-$BUILD_NUMBER</tagName>
          <tagMessage></tagMessage>
          <createTag>true</createTag>
          <updateTag>false</updateTag>
        </hudson.plugins.git.GitPublisher_-TagToPush>
      </tagsToPush>
    </hudson.plugins.git.GitPublisher>
  </publishers>
  <buildWrappers/>
</project>